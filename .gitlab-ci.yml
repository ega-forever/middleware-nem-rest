image: docker:latest
stages:
  - build
  - test
  - release
  - stage
  - deploy
  - nginx_reload
  - clean

services:
  - mongo:latest
  - rabbitmq:latest

variables:
  REGISTRY: gcr.io/deep-wares-144610
  CONTAINER_IMAGE_STAGE: ${REGISTRY}/chronobank/middleware-nem-rest/stage/middleware-nem-rest:${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}
  CONTAINER_IMAGE_STAGE_LATEST: ${REGISTRY}/chronobank/middleware-nem-rest/stage/middleware-nem-rest:latest
  CONTAINER_IMAGE_PROD: ${REGISTRY}/chronobank/middleware-nem-rest/prod/middleware-nem-rest:${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}
  CONTAINER_IMAGE_PROD_LATEST: ${REGISTRY}/chronobank/middleware-nem-rest/prod/middleware-nem-rest:latest
  CONTAINER_IMAGE_DEV: ${REGISTRY}/chronobank/middleware-nem-rest/develop/middleware-nem-rest:${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}

  MONGO_URI: mongodb://mongo:27017/data
  RABBIT_URI: amqp://rabbitmq:5672

  #CONTAINER_IMAGE: ${REGISTRY}/chronobank/middleware-nem-rest/middleware-nem-rest:${CI_COMMIT_TAG}

  DOCKER_DRIVER: overlay2

cache:
  untracked: true
  key: "$CI_BUILD_REF_NAME"
  paths:
    - node_modules/

Build:
  stage: build
  image: keymetrics/pm2:latest-alpine

  variables:
    DOCKER_DRIVER: overlay2

  script:
    - apk update
    - apk add git ncurses-dev openssl-dev nss-dev expat-dev libc-dev g++ gcc make python
    - npm cache verify
    - npm install

  artifacts:
    paths:
      - node_modules/
    expire_in: "3 day"

Tests:
  stage: test
  image: keymetrics/pm2:latest-alpine

  variables:
    DOCKER_DRIVER: overlay2

  before_script:
    - apk update
    - apk add git ncurses-dev openssl-dev nss-dev expat-dev libc-dev g++ gcc make python
    - npm cache verify
    - npm install

  script:
    #- npm run lint
    #- npm test -- --coverage
    - exit 0

  retry: 2

  artifacts:
    paths:
      - node_modules/
    expire_in: "3 day"

Release_DEVELOP:
  stage: release
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2

  script:
    - docker login -u _json_key -p "$(cat /gcr-secret/key.json)" https://gcr.io
    - docker build --no-cache --build-arg CONF_TYPE_ARG=develop -t ${CONTAINER_IMAGE_DEV} .
    - docker push ${CONTAINER_IMAGE_DEV}

  only:
    - develop
  #only:
    #- tags


Release_STAGE:
  stage: release
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2

  script:
    - docker login -u _json_key -p "$(cat /gcr-secret/key.json)" https://gcr.io
    - docker build --no-cache --build-arg CONF_TYPE_ARG=stage -t ${CONTAINER_IMAGE_STAGE} .
    - docker tag ${CONTAINER_IMAGE_STAGE} ${CONTAINER_IMAGE_STAGE_LATEST}
    - docker push ${CONTAINER_IMAGE_STAGE}
    - docker push ${CONTAINER_IMAGE_STAGE_LATEST}

  only:
    - release
  #only:
    #- tags

Release_PROD:
  stage: release
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2

  script:
    - docker login -u _json_key -p "$(cat /gcr-secret/key.json)" https://gcr.io
    - docker build --no-cache --build-arg CONF_TYPE_ARG=production -t ${CONTAINER_IMAGE_PROD} .
    - docker tag ${CONTAINER_IMAGE_PROD} ${CONTAINER_IMAGE_PROD_LATEST}
    - docker push ${CONTAINER_IMAGE_PROD}
    - docker push ${CONTAINER_IMAGE_PROD_LATEST}

  only:
    - master
  #only:
    #- tags

Deploy_to_STAGE:
  stage: stage
  image: artemkin/helm-gke:1.0
  before_script:

    - gcloud auth activate-service-account --key-file=/gke-secret/key.json
    - gcloud container clusters get-credentials stage --zone us-central1-b --project deep-wares-144610
    - helm init --client-only

  script:
    - helm lint ./charts/middleware-nem-rest-stage
    - helm upgrade --install middleware-nem-rest-stage -f ./charts/middleware-nem-rest-stage/values.yaml ./charts/middleware-nem-rest-stage
      --set=image.tag=${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}
      --timeout 900
      --namespace=middleware
      --wait
      --debug

  only:
    - release
  #only:
    #- tags

Deploy_to_DEVELOP:
  stage: stage
  image: artemkin/helm-gke:1.0
  before_script:

    - gcloud auth activate-service-account --key-file=/gke-secret/key.json
    - gcloud container clusters get-credentials stage --zone us-central1-b --project deep-wares-144610
    - helm init --client-only

  script:
    - helm lint ./charts/middleware-nem-rest-develop
    - helm upgrade --install middleware-nem-rest-develop -f ./charts/middleware-nem-rest-develop/values.yaml ./charts/middleware-nem-rest-develop
      --set=image.tag=${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}
      --timeout 900
      --namespace=middleware
      --wait
      --debug

  only:
    - develop
  #only:
    #- tags


Deploy_to_PROD:
  stage: deploy
  image: artemkin/helm-gke:1.0
  before_script:

    - gcloud auth activate-service-account --key-file=/gke-secret/key.json
    - gcloud container clusters get-credentials production --zone us-central1-b --project deep-wares-144610
    - helm init --client-only

  script:
    - helm lint ./charts/middleware-nem-rest-prod
    - helm upgrade --install middleware-nem-rest-prod -f ./charts/middleware-nem-rest-prod/values.yaml ./charts/middleware-nem-rest-prod
      --set=image.tag=${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}
      --timeout 900
      --namespace=middleware
      --wait
      --debug

  only:
    - master
  #only:
    #- tags

######################################################### RELOAD PROD NGINX DNS CACHE ###########################################################

Reload_PROD_Nginx_conf:
  stage: nginx_reload
  image: artemkin/helm-gke:1.0
  before_script:

    - gcloud auth activate-service-account --key-file=/gke-secret/key.json
    - gcloud container clusters get-credentials production --zone us-central1-b --project deep-wares-144610

  script:
    - kubectl exec -n default $(kubectl get pod -n default | grep nginx | awk '{print$1}') -- bash -c "nginx -t" && kubectl exec -n default $(kubectl get pod -n default | grep nginx | awk '{print$1}') -- bash -c "nginx -s reload"

  only:
    - master

##################################################################################################################################################

######################################################### RELOAD STAGE NGINX DNS CACHE ###########################################################

Reload_STAGE_Nginx_conf:
  stage: nginx_reload
  image: artemkin/helm-gke:1.0
  before_script:

    - gcloud auth activate-service-account --key-file=/gke-secret/key.json
    - gcloud container clusters get-credentials stage --zone us-central1-b --project deep-wares-144610

  script:
    - kubectl exec -n default $(kubectl get pod -n default | grep nginx | awk '{print$1}') -- bash -c "nginx -t" && kubectl exec -n default $(kubectl get pod -n default | grep nginx | awk '{print$1}') -- bash -c "nginx -s reload"

  only:
    - release
    - develop

##################################################################################################################################################
########################################################## CLEAN UP ##############################################################################
Clean_up:
  stage: clean
  image: docker

  script:
    - docker system prune --force
    - docker image prune -a
  only:
    - master
    - release
    - develop

##################################################################################################################################################
#### End